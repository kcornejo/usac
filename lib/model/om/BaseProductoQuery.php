<?php


/**
 * Base class that represents a query for the 'producto' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.7 on:
 *
 * 11/09/15 23:08:08
 *
 * @method ProductoQuery orderById($order = Criteria::ASC) Order by the id column
 * @method ProductoQuery orderByDescripcion($order = Criteria::ASC) Order by the descripcion column
 * @method ProductoQuery orderByMarcaId($order = Criteria::ASC) Order by the marca_id column
 * @method ProductoQuery orderByTipoProductoId($order = Criteria::ASC) Order by the tipo_producto_id column
 * @method ProductoQuery orderByTipoPresentacionId($order = Criteria::ASC) Order by the tipo_presentacion_id column
 * @method ProductoQuery orderByCantidadMinima($order = Criteria::ASC) Order by the cantidad_minima column
 * @method ProductoQuery orderByImagen($order = Criteria::ASC) Order by the imagen column
 * @method ProductoQuery orderByCodigo($order = Criteria::ASC) Order by the codigo column
 * @method ProductoQuery orderByPrecio($order = Criteria::ASC) Order by the precio column
 * @method ProductoQuery orderByCosto($order = Criteria::ASC) Order by the costo column
 *
 * @method ProductoQuery groupById() Group by the id column
 * @method ProductoQuery groupByDescripcion() Group by the descripcion column
 * @method ProductoQuery groupByMarcaId() Group by the marca_id column
 * @method ProductoQuery groupByTipoProductoId() Group by the tipo_producto_id column
 * @method ProductoQuery groupByTipoPresentacionId() Group by the tipo_presentacion_id column
 * @method ProductoQuery groupByCantidadMinima() Group by the cantidad_minima column
 * @method ProductoQuery groupByImagen() Group by the imagen column
 * @method ProductoQuery groupByCodigo() Group by the codigo column
 * @method ProductoQuery groupByPrecio() Group by the precio column
 * @method ProductoQuery groupByCosto() Group by the costo column
 *
 * @method ProductoQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method ProductoQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method ProductoQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method ProductoQuery leftJoinMarca($relationAlias = null) Adds a LEFT JOIN clause to the query using the Marca relation
 * @method ProductoQuery rightJoinMarca($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Marca relation
 * @method ProductoQuery innerJoinMarca($relationAlias = null) Adds a INNER JOIN clause to the query using the Marca relation
 *
 * @method ProductoQuery leftJoinTipoProducto($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoProducto relation
 * @method ProductoQuery rightJoinTipoProducto($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoProducto relation
 * @method ProductoQuery innerJoinTipoProducto($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoProducto relation
 *
 * @method ProductoQuery leftJoinTipoPresentacion($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoPresentacion relation
 * @method ProductoQuery rightJoinTipoPresentacion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoPresentacion relation
 * @method ProductoQuery innerJoinTipoPresentacion($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoPresentacion relation
 *
 * @method ProductoQuery leftJoinDetallePedidoProveedor($relationAlias = null) Adds a LEFT JOIN clause to the query using the DetallePedidoProveedor relation
 * @method ProductoQuery rightJoinDetallePedidoProveedor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DetallePedidoProveedor relation
 * @method ProductoQuery innerJoinDetallePedidoProveedor($relationAlias = null) Adds a INNER JOIN clause to the query using the DetallePedidoProveedor relation
 *
 * @method ProductoQuery leftJoinPromocion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Promocion relation
 * @method ProductoQuery rightJoinPromocion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Promocion relation
 * @method ProductoQuery innerJoinPromocion($relationAlias = null) Adds a INNER JOIN clause to the query using the Promocion relation
 *
 * @method ProductoQuery leftJoinInventario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Inventario relation
 * @method ProductoQuery rightJoinInventario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Inventario relation
 * @method ProductoQuery innerJoinInventario($relationAlias = null) Adds a INNER JOIN clause to the query using the Inventario relation
 *
 * @method ProductoQuery leftJoinFacturaDetalle($relationAlias = null) Adds a LEFT JOIN clause to the query using the FacturaDetalle relation
 * @method ProductoQuery rightJoinFacturaDetalle($relationAlias = null) Adds a RIGHT JOIN clause to the query using the FacturaDetalle relation
 * @method ProductoQuery innerJoinFacturaDetalle($relationAlias = null) Adds a INNER JOIN clause to the query using the FacturaDetalle relation
 *
 * @method Producto findOne(PropelPDO $con = null) Return the first Producto matching the query
 * @method Producto findOneOrCreate(PropelPDO $con = null) Return the first Producto matching the query, or a new Producto object populated from the query conditions when no match is found
 *
 * @method Producto findOneById(int $id) Return the first Producto filtered by the id column
 * @method Producto findOneByDescripcion(string $descripcion) Return the first Producto filtered by the descripcion column
 * @method Producto findOneByMarcaId(int $marca_id) Return the first Producto filtered by the marca_id column
 * @method Producto findOneByTipoProductoId(int $tipo_producto_id) Return the first Producto filtered by the tipo_producto_id column
 * @method Producto findOneByTipoPresentacionId(int $tipo_presentacion_id) Return the first Producto filtered by the tipo_presentacion_id column
 * @method Producto findOneByCantidadMinima(int $cantidad_minima) Return the first Producto filtered by the cantidad_minima column
 * @method Producto findOneByImagen(string $imagen) Return the first Producto filtered by the imagen column
 * @method Producto findOneByCodigo(string $codigo) Return the first Producto filtered by the codigo column
 * @method Producto findOneByPrecio(double $precio) Return the first Producto filtered by the precio column
 * @method Producto findOneByCosto(double $costo) Return the first Producto filtered by the costo column
 *
 * @method array findById(int $id) Return Producto objects filtered by the id column
 * @method array findByDescripcion(string $descripcion) Return Producto objects filtered by the descripcion column
 * @method array findByMarcaId(int $marca_id) Return Producto objects filtered by the marca_id column
 * @method array findByTipoProductoId(int $tipo_producto_id) Return Producto objects filtered by the tipo_producto_id column
 * @method array findByTipoPresentacionId(int $tipo_presentacion_id) Return Producto objects filtered by the tipo_presentacion_id column
 * @method array findByCantidadMinima(int $cantidad_minima) Return Producto objects filtered by the cantidad_minima column
 * @method array findByImagen(string $imagen) Return Producto objects filtered by the imagen column
 * @method array findByCodigo(string $codigo) Return Producto objects filtered by the codigo column
 * @method array findByPrecio(double $precio) Return Producto objects filtered by the precio column
 * @method array findByCosto(double $costo) Return Producto objects filtered by the costo column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseProductoQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseProductoQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'propel', $modelName = 'Producto', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new ProductoQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     ProductoQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return ProductoQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof ProductoQuery) {
            return $criteria;
        }
        $query = new ProductoQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query 
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Producto|Producto[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = ProductoPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(ProductoPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Producto A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `DESCRIPCION`, `MARCA_ID`, `TIPO_PRODUCTO_ID`, `TIPO_PRESENTACION_ID`, `CANTIDAD_MINIMA`, `IMAGEN`, `CODIGO`, `PRECIO`, `COSTO` FROM `producto` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);			
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Producto();
            $obj->hydrate($row);
            ProductoPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Producto|Producto[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Producto[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(ProductoPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(ProductoPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(ProductoPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the descripcion column
     *
     * Example usage:
     * <code>
     * $query->filterByDescripcion('fooValue');   // WHERE descripcion = 'fooValue'
     * $query->filterByDescripcion('%fooValue%'); // WHERE descripcion LIKE '%fooValue%'
     * </code>
     *
     * @param     string $descripcion The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByDescripcion($descripcion = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($descripcion)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $descripcion)) {
                $descripcion = str_replace('*', '%', $descripcion);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProductoPeer::DESCRIPCION, $descripcion, $comparison);
    }

    /**
     * Filter the query on the marca_id column
     *
     * Example usage:
     * <code>
     * $query->filterByMarcaId(1234); // WHERE marca_id = 1234
     * $query->filterByMarcaId(array(12, 34)); // WHERE marca_id IN (12, 34)
     * $query->filterByMarcaId(array('min' => 12)); // WHERE marca_id > 12
     * </code>
     *
     * @see       filterByMarca()
     *
     * @param     mixed $marcaId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByMarcaId($marcaId = null, $comparison = null)
    {
        if (is_array($marcaId)) {
            $useMinMax = false;
            if (isset($marcaId['min'])) {
                $this->addUsingAlias(ProductoPeer::MARCA_ID, $marcaId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($marcaId['max'])) {
                $this->addUsingAlias(ProductoPeer::MARCA_ID, $marcaId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::MARCA_ID, $marcaId, $comparison);
    }

    /**
     * Filter the query on the tipo_producto_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoProductoId(1234); // WHERE tipo_producto_id = 1234
     * $query->filterByTipoProductoId(array(12, 34)); // WHERE tipo_producto_id IN (12, 34)
     * $query->filterByTipoProductoId(array('min' => 12)); // WHERE tipo_producto_id > 12
     * </code>
     *
     * @see       filterByTipoProducto()
     *
     * @param     mixed $tipoProductoId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByTipoProductoId($tipoProductoId = null, $comparison = null)
    {
        if (is_array($tipoProductoId)) {
            $useMinMax = false;
            if (isset($tipoProductoId['min'])) {
                $this->addUsingAlias(ProductoPeer::TIPO_PRODUCTO_ID, $tipoProductoId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoProductoId['max'])) {
                $this->addUsingAlias(ProductoPeer::TIPO_PRODUCTO_ID, $tipoProductoId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::TIPO_PRODUCTO_ID, $tipoProductoId, $comparison);
    }

    /**
     * Filter the query on the tipo_presentacion_id column
     *
     * Example usage:
     * <code>
     * $query->filterByTipoPresentacionId(1234); // WHERE tipo_presentacion_id = 1234
     * $query->filterByTipoPresentacionId(array(12, 34)); // WHERE tipo_presentacion_id IN (12, 34)
     * $query->filterByTipoPresentacionId(array('min' => 12)); // WHERE tipo_presentacion_id > 12
     * </code>
     *
     * @see       filterByTipoPresentacion()
     *
     * @param     mixed $tipoPresentacionId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByTipoPresentacionId($tipoPresentacionId = null, $comparison = null)
    {
        if (is_array($tipoPresentacionId)) {
            $useMinMax = false;
            if (isset($tipoPresentacionId['min'])) {
                $this->addUsingAlias(ProductoPeer::TIPO_PRESENTACION_ID, $tipoPresentacionId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($tipoPresentacionId['max'])) {
                $this->addUsingAlias(ProductoPeer::TIPO_PRESENTACION_ID, $tipoPresentacionId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::TIPO_PRESENTACION_ID, $tipoPresentacionId, $comparison);
    }

    /**
     * Filter the query on the cantidad_minima column
     *
     * Example usage:
     * <code>
     * $query->filterByCantidadMinima(1234); // WHERE cantidad_minima = 1234
     * $query->filterByCantidadMinima(array(12, 34)); // WHERE cantidad_minima IN (12, 34)
     * $query->filterByCantidadMinima(array('min' => 12)); // WHERE cantidad_minima > 12
     * </code>
     *
     * @param     mixed $cantidadMinima The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByCantidadMinima($cantidadMinima = null, $comparison = null)
    {
        if (is_array($cantidadMinima)) {
            $useMinMax = false;
            if (isset($cantidadMinima['min'])) {
                $this->addUsingAlias(ProductoPeer::CANTIDAD_MINIMA, $cantidadMinima['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($cantidadMinima['max'])) {
                $this->addUsingAlias(ProductoPeer::CANTIDAD_MINIMA, $cantidadMinima['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::CANTIDAD_MINIMA, $cantidadMinima, $comparison);
    }

    /**
     * Filter the query on the imagen column
     *
     * Example usage:
     * <code>
     * $query->filterByImagen('fooValue');   // WHERE imagen = 'fooValue'
     * $query->filterByImagen('%fooValue%'); // WHERE imagen LIKE '%fooValue%'
     * </code>
     *
     * @param     string $imagen The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByImagen($imagen = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($imagen)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $imagen)) {
                $imagen = str_replace('*', '%', $imagen);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProductoPeer::IMAGEN, $imagen, $comparison);
    }

    /**
     * Filter the query on the codigo column
     *
     * Example usage:
     * <code>
     * $query->filterByCodigo('fooValue');   // WHERE codigo = 'fooValue'
     * $query->filterByCodigo('%fooValue%'); // WHERE codigo LIKE '%fooValue%'
     * </code>
     *
     * @param     string $codigo The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByCodigo($codigo = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($codigo)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $codigo)) {
                $codigo = str_replace('*', '%', $codigo);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(ProductoPeer::CODIGO, $codigo, $comparison);
    }

    /**
     * Filter the query on the precio column
     *
     * Example usage:
     * <code>
     * $query->filterByPrecio(1234); // WHERE precio = 1234
     * $query->filterByPrecio(array(12, 34)); // WHERE precio IN (12, 34)
     * $query->filterByPrecio(array('min' => 12)); // WHERE precio > 12
     * </code>
     *
     * @param     mixed $precio The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByPrecio($precio = null, $comparison = null)
    {
        if (is_array($precio)) {
            $useMinMax = false;
            if (isset($precio['min'])) {
                $this->addUsingAlias(ProductoPeer::PRECIO, $precio['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($precio['max'])) {
                $this->addUsingAlias(ProductoPeer::PRECIO, $precio['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::PRECIO, $precio, $comparison);
    }

    /**
     * Filter the query on the costo column
     *
     * Example usage:
     * <code>
     * $query->filterByCosto(1234); // WHERE costo = 1234
     * $query->filterByCosto(array(12, 34)); // WHERE costo IN (12, 34)
     * $query->filterByCosto(array('min' => 12)); // WHERE costo > 12
     * </code>
     *
     * @param     mixed $costo The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function filterByCosto($costo = null, $comparison = null)
    {
        if (is_array($costo)) {
            $useMinMax = false;
            if (isset($costo['min'])) {
                $this->addUsingAlias(ProductoPeer::COSTO, $costo['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($costo['max'])) {
                $this->addUsingAlias(ProductoPeer::COSTO, $costo['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(ProductoPeer::COSTO, $costo, $comparison);
    }

    /**
     * Filter the query by a related Marca object
     *
     * @param   Marca|PropelObjectCollection $marca The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByMarca($marca, $comparison = null)
    {
        if ($marca instanceof Marca) {
            return $this
                ->addUsingAlias(ProductoPeer::MARCA_ID, $marca->getId(), $comparison);
        } elseif ($marca instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(ProductoPeer::MARCA_ID, $marca->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByMarca() only accepts arguments of type Marca or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Marca relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinMarca($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Marca');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Marca');
        }

        return $this;
    }

    /**
     * Use the Marca relation Marca object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   MarcaQuery A secondary query class using the current class as primary query
     */
    public function useMarcaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinMarca($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Marca', 'MarcaQuery');
    }

    /**
     * Filter the query by a related TipoProducto object
     *
     * @param   TipoProducto|PropelObjectCollection $tipoProducto The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTipoProducto($tipoProducto, $comparison = null)
    {
        if ($tipoProducto instanceof TipoProducto) {
            return $this
                ->addUsingAlias(ProductoPeer::TIPO_PRODUCTO_ID, $tipoProducto->getId(), $comparison);
        } elseif ($tipoProducto instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(ProductoPeer::TIPO_PRODUCTO_ID, $tipoProducto->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByTipoProducto() only accepts arguments of type TipoProducto or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TipoProducto relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinTipoProducto($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TipoProducto');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TipoProducto');
        }

        return $this;
    }

    /**
     * Use the TipoProducto relation TipoProducto object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TipoProductoQuery A secondary query class using the current class as primary query
     */
    public function useTipoProductoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTipoProducto($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TipoProducto', 'TipoProductoQuery');
    }

    /**
     * Filter the query by a related TipoPresentacion object
     *
     * @param   TipoPresentacion|PropelObjectCollection $tipoPresentacion The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByTipoPresentacion($tipoPresentacion, $comparison = null)
    {
        if ($tipoPresentacion instanceof TipoPresentacion) {
            return $this
                ->addUsingAlias(ProductoPeer::TIPO_PRESENTACION_ID, $tipoPresentacion->getId(), $comparison);
        } elseif ($tipoPresentacion instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(ProductoPeer::TIPO_PRESENTACION_ID, $tipoPresentacion->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByTipoPresentacion() only accepts arguments of type TipoPresentacion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the TipoPresentacion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinTipoPresentacion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('TipoPresentacion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'TipoPresentacion');
        }

        return $this;
    }

    /**
     * Use the TipoPresentacion relation TipoPresentacion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   TipoPresentacionQuery A secondary query class using the current class as primary query
     */
    public function useTipoPresentacionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinTipoPresentacion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'TipoPresentacion', 'TipoPresentacionQuery');
    }

    /**
     * Filter the query by a related DetallePedidoProveedor object
     *
     * @param   DetallePedidoProveedor|PropelObjectCollection $detallePedidoProveedor  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDetallePedidoProveedor($detallePedidoProveedor, $comparison = null)
    {
        if ($detallePedidoProveedor instanceof DetallePedidoProveedor) {
            return $this
                ->addUsingAlias(ProductoPeer::ID, $detallePedidoProveedor->getProductoId(), $comparison);
        } elseif ($detallePedidoProveedor instanceof PropelObjectCollection) {
            return $this
                ->useDetallePedidoProveedorQuery()
                ->filterByPrimaryKeys($detallePedidoProveedor->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDetallePedidoProveedor() only accepts arguments of type DetallePedidoProveedor or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DetallePedidoProveedor relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinDetallePedidoProveedor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DetallePedidoProveedor');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DetallePedidoProveedor');
        }

        return $this;
    }

    /**
     * Use the DetallePedidoProveedor relation DetallePedidoProveedor object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DetallePedidoProveedorQuery A secondary query class using the current class as primary query
     */
    public function useDetallePedidoProveedorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDetallePedidoProveedor($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DetallePedidoProveedor', 'DetallePedidoProveedorQuery');
    }

    /**
     * Filter the query by a related Promocion object
     *
     * @param   Promocion|PropelObjectCollection $promocion  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPromocion($promocion, $comparison = null)
    {
        if ($promocion instanceof Promocion) {
            return $this
                ->addUsingAlias(ProductoPeer::ID, $promocion->getProductoId(), $comparison);
        } elseif ($promocion instanceof PropelObjectCollection) {
            return $this
                ->usePromocionQuery()
                ->filterByPrimaryKeys($promocion->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByPromocion() only accepts arguments of type Promocion or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Promocion relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinPromocion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Promocion');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Promocion');
        }

        return $this;
    }

    /**
     * Use the Promocion relation Promocion object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PromocionQuery A secondary query class using the current class as primary query
     */
    public function usePromocionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPromocion($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Promocion', 'PromocionQuery');
    }

    /**
     * Filter the query by a related Inventario object
     *
     * @param   Inventario|PropelObjectCollection $inventario  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByInventario($inventario, $comparison = null)
    {
        if ($inventario instanceof Inventario) {
            return $this
                ->addUsingAlias(ProductoPeer::ID, $inventario->getProductoId(), $comparison);
        } elseif ($inventario instanceof PropelObjectCollection) {
            return $this
                ->useInventarioQuery()
                ->filterByPrimaryKeys($inventario->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByInventario() only accepts arguments of type Inventario or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Inventario relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinInventario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Inventario');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Inventario');
        }

        return $this;
    }

    /**
     * Use the Inventario relation Inventario object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   InventarioQuery A secondary query class using the current class as primary query
     */
    public function useInventarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinInventario($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Inventario', 'InventarioQuery');
    }

    /**
     * Filter the query by a related FacturaDetalle object
     *
     * @param   FacturaDetalle|PropelObjectCollection $facturaDetalle  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   ProductoQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByFacturaDetalle($facturaDetalle, $comparison = null)
    {
        if ($facturaDetalle instanceof FacturaDetalle) {
            return $this
                ->addUsingAlias(ProductoPeer::ID, $facturaDetalle->getProductoId(), $comparison);
        } elseif ($facturaDetalle instanceof PropelObjectCollection) {
            return $this
                ->useFacturaDetalleQuery()
                ->filterByPrimaryKeys($facturaDetalle->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByFacturaDetalle() only accepts arguments of type FacturaDetalle or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the FacturaDetalle relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function joinFacturaDetalle($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('FacturaDetalle');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'FacturaDetalle');
        }

        return $this;
    }

    /**
     * Use the FacturaDetalle relation FacturaDetalle object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   FacturaDetalleQuery A secondary query class using the current class as primary query
     */
    public function useFacturaDetalleQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinFacturaDetalle($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'FacturaDetalle', 'FacturaDetalleQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Producto $producto Object to remove from the list of results
     *
     * @return ProductoQuery The current query, for fluid interface
     */
    public function prune($producto = null)
    {
        if ($producto) {
            $this->addUsingAlias(ProductoPeer::ID, $producto->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

}
